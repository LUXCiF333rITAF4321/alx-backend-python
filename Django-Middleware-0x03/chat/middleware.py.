import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class RequestLoggingMiddleware:
    """
    Middleware pour logger chaque requête dans requests.log
    """
    def __init__(self, get_response):
        self.get_response = get_response
        # Configure le logger pour écrire dans requests.log
        logging.basicConfig(
            filename='requests.log',
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

    def __call__(self, request):
        # Log l'URL et la méthode
        logger.info(f"Request: {request.method} {request.get_full_path()}")
        response = self.get_response(request)
        return response
import time
from collections import defaultdict
from django.http import HttpResponseForbidden


class OffensiveLanguageMiddleware:
    """
    Middleware that limits chat messages per IP.
    Restricts users to 5 POST requests per minute.
    """

    def __init__(self, get_response):
        self.get_response = get_response
        # Dictionnaire : { ip: [timestamps] }
        self.message_log = defaultdict(list)

    def __call__(self, request):
        client_ip = self.get_client_ip(request)

        if request.method == "POST" and "/messages" in request.path:
            current_time = time.time()
            # Nettoyer les timestamps vieux de plus d'une minute
            self.message_log[client_ip] = [
                ts for ts in self.message_log[client_ip]
                if current_time - ts < 60
            ]

            # Vérifier si dépassement du quota
            if len(self.message_log[client_ip]) >= 5:
                return HttpResponseForbidden(
                    "Message limit exceeded. Please wait before sending more."
                )

            # Enregistrer le timestamp
            self.message_log[client_ip].append(current_time)

        return self.get_response(request)

    def get_client_ip(self, request):
        """Récupérer l'adresse IP du client"""
        x_forwarded_for = request.META.get("HTTP_X_FORWARDED_FOR")
        if x_forwarded_for:
            ip = x_forwarded_for.split(",")[0]
        else:
            ip = request.META.get("REMOTE_ADDR")
        return ip
from django.http import HttpResponseForbidden


class RolePermissionMiddleware:
    """
    Middleware that restricts access based on user role.
    Only 'admin' and 'moderator' are allowed.
    """

    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # Vérifie si l'utilisateur est authentifié
        if request.user.is_authenticated:
            # Supposons que le rôle est stocké dans un attribut `role` du modèle User
            user_role = getattr(request.user, "role", None)

            if user_role not in ["admin", "moderator"]:
                return HttpResponseForbidden(
                    "You do not have permission to perform this action."
                )

        return self.get_response(request)
